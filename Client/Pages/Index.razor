@page "/"
@page "/{home:bool}"
@using Microsoft.AspNetCore.SignalR.Client
@using SarinDemoChatti.Shared.Models
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="top-row px-4 mb-4">
    @foreach (var group in messageGroups)
    {
        <a href="" class="ml-md-auto btn-link" @onclick='() => setCurrentGroup(group.Key)'>
            @group.Key
            @{
                if (group.Value > 0)
                {
                    <span class="circle">@group.Value</span>
                }
            }
        </a>
    }
</div>

@if (currentGroup == null || Home == true)
{
    <h3 class="mt-4">Welcome to Sari's nature related chat service!</h3>
    Home = false;
}
else
{
    <ChatGroup GroupName=@currentGroup HubConnection=@hubConnection GroupMessages=@getGroupMessages(currentGroup) />
}

@code {
    private HubConnection? hubConnection;
    private List<MessageInfo> receivedMessages = new List<MessageInfo>();
    private string? currentGroup;

    private Dictionary<string, int> messageGroups = new Dictionary<string, int> {
        { "Mammals", 0 }, { "Reptiles", 0 }, { "Birds", 0 }, { "Insects", 0 }, { "Plants", 0 }, { "Mushrooms", 0 }, { "Environment", 0 }};

    [Parameter]
    public Boolean Home { get; set; }


    private List<MessageInfo>? getGroupMessages(string groupName)
    {
        return receivedMessages?.Where(m => m.GroupName == groupName).ToList();

    }

    private void setCurrentGroup(string groupName)
    {
        currentGroup = groupName;
        messageGroups[currentGroup] = 0;

    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<MessageInfo>("ReceiveMessage", (messageInfo) =>
        {
            receivedMessages.Add(messageInfo);
            if (currentGroup != messageInfo.GroupName)
            {
                messageGroups[messageInfo.GroupName]++;
            }
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }


    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
